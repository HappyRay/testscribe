format_version: 1
module: test_scribe.gather_referenced_modules
tests:
- name: test_gather_expressions
  short_name: _
  target:
    name: gather_expressions
  parameters:
  - name: t
    value: !test_scribe/mock 't'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: attribe2
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e2
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: patch-e
  mocks:
  - name: t
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks:
      - !test_scribe/mock 'm_mock_model'
      init_parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("init",
        test_scribe.model_type.ExpressionModel("e"))])'
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("p",
        test_scribe.model_type.ExpressionModel("e2"))])'
      patches:
      - !test_scribe/mock 'm_patch_model'
  - name: m_mock_model
    spec: test_scribe.model_type.MockModel
    attributes:
      attributes: !test_scribe/expression '{"b": test_scribe.model_type.ExpressionModel("attribe2")}'
      calls: []
  - name: m_patch_model
    spec: test_scribe.model_type.PatchModel
    attributes:
      replacement: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("patch-e")'
- name: test_gather_expressions_from_a_mock
  short_name: _
  target:
    name: gather_expressions_from_a_mock
  parameters:
  - name: m
    value: !test_scribe/mock 'm_1'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: attribe2
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e
  mocks:
  - name: m_1
    spec: test_scribe.model_type.MockModel
    attributes:
      attributes: !test_scribe/expression '{"b": test_scribe.model_type.ExpressionModel("attribe2")}'
      calls:
      - !test_scribe/mock 'm_mock_call_model'
  - name: m_mock_call_model
    spec: test_scribe.model_type.MockCallModel
    attributes:
      return_value: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e")'
- name: test_gather_expressions_from_mock_attributes
  short_name: _
  target:
    name: gather_expressions_from_mock_attributes
  parameters:
  - name: m
    value: !test_scribe/mock 'm_1'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    members:
      expression: attribe1
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    members:
      expression: attribe2
  mocks:
  - name: m_1
    spec: test_scribe.model.MockModel
    attributes:
      attributes: !test_scribe/expression '{''a'': test_scribe.model_type.ExpressionModel("attribe1"),
        ''b'': test_scribe.model_type.ExpressionModel("attribe2")}'
- name: test_gather_expressions_from_mock_call_return
  short_name: _
  target:
    name: gather_expressions_from_mock_call_return
  parameters:
  - name: m
    value: !test_scribe/mock 'm_1'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e1
  mocks:
  - name: m_1
    spec: test_scribe.model_type.MockModel
    attributes:
      calls:
      - !test_scribe/mock 'm_mock_call_model'
      - !test_scribe/mock 'm_mock_call_model_1'
      - !test_scribe/mock 'm_mock_call_model_2'
  - name: m_mock_call_model
    spec: test_scribe.model_type.MockCallModel
    attributes:
      return_value: 1
  - name: m_mock_call_model_1
    spec: test_scribe.model_type.MockCallModel
    attributes:
      return_value: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e")'
  - name: m_mock_call_model_2
    spec: test_scribe.model_type.MockCallModel
    attributes:
      return_value: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e1")'
- name: test_gather_expressions_from_mocks
  short_name: _
  target:
    name: gather_expressions_from_mocks
  parameters:
  - name: t
    value: !test_scribe/mock 't'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: attribe2
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e
  mocks:
  - name: t
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks:
      - !test_scribe/mock 'm_mock_model'
      - !test_scribe/mock 'm_mock_model_1'
  - name: m_mock_model
    spec: test_scribe.model_type.MockModel
    attributes:
      attributes: !test_scribe/expression '{"b": test_scribe.model_type.ExpressionModel("attribe2")}'
      calls: []
  - name: m_mock_model_1
    spec: test_scribe.model_type.MockModel
    attributes:
      attributes: {}
      calls:
      - !test_scribe/mock 'm_mock_call_model'
  - name: m_mock_call_model
    spec: test_scribe.model_type.MockCallModel
    attributes:
      return_value: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e")'
- name: test_gather_expressions_from_named_values_none
  short_name: _none
  target:
    name: gather_expressions_from_named_values
  parameters:
  - name: nv
    value: null
  result: []
- name: test_gather_expressions_from_named_values_has_expressions
  short_name: _has_expressions
  target:
    name: gather_expressions_from_named_values
  parameters:
  - name: nv
    value: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([(''a'', 1),
      (''b'', test_scribe.model_type.ExpressionModel(''e'')), (''b'', test_scribe.model_type.ExpressionModel(''e1''))])'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    members:
      expression: e
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    members:
      expression: e1
- name: test_gather_expressions_from_named_values_no_expressions
  short_name: _no_expressions
  target:
    name: gather_expressions_from_named_values
  parameters:
  - name: nv
    value: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([(''a'', 1)])'
  result: []
- name: test_gather_expressions_from_patches
  short_name: _
  target:
    name: gather_expressions_from_patches
  parameters:
  - name: patches
    value:
    - !test_scribe/mock 'm_patch_model'
    - !test_scribe/mock 'm_patch_model_1'
    - !test_scribe/mock 'm_patch_model_2'
  result:
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e
  - !test_scribe/object
    type: test_scribe.model_type.ExpressionModel
    repr: e1
  mocks:
  - name: m_patch_model
    spec: test_scribe.model_type.PatchModel
    attributes:
      replacement: 1
  - name: m_patch_model_1
    spec: test_scribe.model_type.PatchModel
    attributes:
      replacement: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e")'
  - name: m_patch_model_2
    spec: test_scribe.model_type.PatchModel
    attributes:
      replacement: !test_scribe/expression 'test_scribe.model_type.ExpressionModel("e1")'
- name: test_gather_import_statements_for_referenced_modules
  short_name: _
  target:
    name: gather_import_statements_for_referenced_modules
  parameters:
  - name: tests
    value:
    - !test_scribe/mock 'm_test_model'
    - !test_scribe/mock 'm_test_model_1'
  result:
  - import a.b
  - import call_mod
  mocks:
  - name: m_test_model
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks: []
      exception: null
      result: !test_scribe/expression 'test_scribe.model_type.CallableModel("foo",
        "call_mod")'
      init_parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      patches: []
  - name: m_test_model_1
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks: []
      exception: !test_scribe/expression 'test_scribe.model_type.ExceptionModel("a.b.C",
        "msg")'
      init_parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      patches: []
- name: test_gather_import_statements_from_module_names_normal
  short_name: _normal
  target:
    name: gather_import_statements_from_module_names
  parameters:
  - name: module_names
    value:
    - a.b
    - c
  result:
  - import a.b
  - import c
- name: test_gather_import_statements_from_module_names_ignore_builtins
  short_name: _ignore_builtins
  target:
    name: gather_import_statements_from_module_names
  parameters:
  - name: module_names
    value:
    - builtins
  result: []
- name: test_gather_modules_from_expressions
  short_name: _
  target:
    name: gather_modules_from_expressions
  parameters:
  - name: expressions
    value:
    - !test_scribe/mock 'm_expression_model'
    - !test_scribe/mock 'm_expression_model_1'
    - !test_scribe/mock 'm_expression_model_2'
  result:
  - test_data.simple
  - test_data.simple
  mocks:
  - name: m_expression_model
    spec: test_scribe.model_type.ExpressionModel
    attributes:
      expression: '1'
  - name: m_expression_model_1
    spec: test_scribe.model_type.ExpressionModel
    attributes:
      expression: test_data.simple.C
  - name: m_expression_model_2
    spec: test_scribe.model_type.ExpressionModel
    attributes:
      expression: test_data.simple.C
- name: test_get_module_names_from_expressions
  short_name: _
  target:
    name: get_module_names_from_expressions
  parameters:
  - name: t
    value: !test_scribe/mock 't'
  result:
  - test_data.simple
  mocks:
  - name: t
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks: []
      init_parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("p",
        test_scribe.model_type.ExpressionModel("test_data.simple.C"))])'
      patches: []
- name: test_get_module_names_from_value_dict
  short_name: _dict
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression '{"a": 1, "b": test_scribe.model_type.CallableModel("foo",
      "a"), test_data.value.object_model_c: 2}'
  result:
  - a
  - test_data.simple
- name: test_get_module_names_from_value_set
  short_name: _set
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression '{test_scribe.model_type.CallableModel("foo", "a")}'
  result:
  - a
- name: test_get_module_names_from_value_tuple
  short_name: _tuple
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression '(1, test_scribe.model_type.CallableModel("foo",
      "a"))'
  result:
  - a
- name: test_get_module_names_from_value_list
  short_name: _list
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression '[test_scribe.model_type.CallableModel("foo", "a"),
      1]'
  result:
  - a
- name: test_get_module_names_from_value_callable_model
  short_name: _callable_model
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression 'test_scribe.model_type.CallableModel("foo", "a")'
  result:
  - a
- name: test_get_module_names_from_value_object_model_with_object_model_member
  short_name: _object_model_with_object_model_member
  target:
    name: get_module_names_from_value
  parameters:
  - name: v
    value: !test_scribe/expression 'test_scribe.model_type.ObjectModel(type="a.B",
      repr="", members={"m": 1, "m2": test_scribe.model_type.ObjectModel("c.D", "",
      {})})'
  result:
  - a
  - c
- name: test_get_module_names_in_mock_call_params
  short_name: _
  target:
    name: get_module_names_in_mock_call_params
  parameters:
  - name: t
    value: !test_scribe/mock 't'
  result:
  - test_data.simple
  - test_data.simple
  mocks:
  - name: t
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks:
      - !test_scribe/mock 'm_mock_model'
      - !test_scribe/mock 'm_mock_model_1'
  - name: m_mock_model
    spec: test_scribe.model_type.MockModel
    attributes:
      calls:
      - !test_scribe/mock 'm_mock_call_model'
  - name: m_mock_model_1
    spec: test_scribe.model_type.MockModel
    attributes:
      calls:
      - !test_scribe/mock 'm_mock_call_model_1'
  - name: m_mock_call_model
    spec: test_scribe.model_type.MockCallModel
    attributes:
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("a",
        test_data.value.callable_model_foo)])'
  - name: m_mock_call_model_1
    spec: test_scribe.model_type.MockCallModel
    attributes:
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("b",
        test_data.value.object_model_c)])'
- name: test_get_module_names_in_mock_specs
  short_name: _
  target:
    name: get_module_names_in_mock_specs
  parameters:
  - name: test
    value: !test_scribe/mock 'test'
  result:
  - a
  - c
  mocks:
  - name: test
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks:
      - !test_scribe/mock 'm_mock_model'
      - !test_scribe/mock 'm_mock_model_1'
  - name: m_mock_model
    spec: test_scribe.model_type.MockModel
    attributes:
      spec_str: a.B
  - name: m_mock_model_1
    spec: test_scribe.model_type.MockModel
    attributes:
      spec_str: c.D
- name: test_get_module_names_in_one_mock_call_param
  short_name: _
  target:
    name: get_module_names_in_one_mock_call_param
  parameters:
  - name: params
    value: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("a", test_data.value.callable_model_foo),
      ("b", test_data.value.object_model_c)])'
  result:
  - test_data.simple
  - test_data.simple
- name: test_get_module_names_in_result_normal
  short_name: _normal
  target:
    name: get_module_names_in_result
  parameters:
  - name: test
    value: !test_scribe/mock 'test'
  result:
  - a
  mocks:
  - name: test
    spec: test_scribe.model_type.TestModel
    attributes:
      exception: null
      result: !test_scribe/expression 'test_scribe.model_type.CallableModel("foo",
        "a")'
- name: test_get_module_names_in_result_exception
  short_name: _exception
  target:
    name: get_module_names_in_result
  parameters:
  - name: test
    value: !test_scribe/mock 'test'
  result:
  - a.b
  mocks:
  - name: test
    spec: test_scribe.model_type.TestModel
    attributes:
      exception: !test_scribe/expression 'test_scribe.model_type.ExceptionModel("a.b.C",
        "msg")'
- name: test_get_referenced_modules_in_a_test
  short_name: _
  target:
    name: get_referenced_modules_in_a_test
  parameters:
  - name: t
    value: !test_scribe/mock 't'
  result:
  - spec_mod
  - call_mod
  - a.b
  - test_data.simple
  mocks:
  - name: t
    spec: test_scribe.model_type.TestModel
    attributes:
      mocks:
      - !test_scribe/mock 'm_mock_model'
      exception: !test_scribe/expression 'test_scribe.model_type.ExceptionModel("a.b.C",
        "msg")'
      init_parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues()'
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("p",
        test_scribe.model_type.ExpressionModel("test_data.simple.C"))])'
      patches: []
  - name: m_mock_model
    spec: test_scribe.model_type.MockModel
    attributes:
      spec_str: spec_mod.A
      calls:
      - !test_scribe/mock 'm_mock_call_model'
      attributes: {}
  - name: m_mock_call_model
    spec: test_scribe.model_type.MockCallModel
    attributes:
      parameters: !test_scribe/expression 'test_scribe.namedvalues.NamedValues([("p",
        test_scribe.model_type.CallableModel("foo", "call_mod"))])'
      return_value: 1
