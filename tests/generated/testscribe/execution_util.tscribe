format_version: 1
module: testscribe.execution_util
tests:
- name: test_config_logging_no_config_file
  short_name: _no_config_file
  target:
    name: config_logging
  parameters: []
  result: null
  patches:
  - target: testscribe.execution_util.does_logging_config_file_exist
    replacement: !testscribe/mock 'm_does_logging_config_file_exist'
  - target: testscribe.execution_util.basicConfig
    replacement: !testscribe/mock 'm_basic_config'
  mocks:
  - name: m_does_logging_config_file_exist
    spec: testscribe.execution_util.does_logging_config_file_exist
    calls:
    - parameters: []
      return: false
  - name: m_basic_config
    spec: logging.basicConfig
    calls:
    - parameters: []
      return: !testscribe/expression 'ignore'
- name: test_config_logging_with_config_file
  short_name: _with_config_file
  target:
    name: config_logging
  parameters: []
  result: null
  patches:
  - target: testscribe.execution_util.does_logging_config_file_exist
    replacement: !testscribe/mock 'm_does_logging_config_file_exist'
  - target: testscribe.execution_util.fileConfig
    replacement: !testscribe/mock 'm_file_config'
  mocks:
  - name: m_does_logging_config_file_exist
    spec: testscribe.execution_util.does_logging_config_file_exist
    calls:
    - parameters: []
      return: true
  - name: m_file_config
    spec: logging.config.fileConfig
    calls:
    - parameters:
      - name: fname
        value: test_scribe_logging.conf
      - name: disable_existing_loggers
        value: false
      return: !testscribe/expression 'ignore'
- name: test_create_unit_test_file_name
  short_name: _
  target:
    name: create_unit_test_file_name
  parameters:
  - name: base_name
    value: b
  result: test_b_g.py
- name: test_infer_module_name_from_test_file_path_test_not_at_the_beginning
  short_name: _test_not_at_the_beginning
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: atest_b_g.py
  result: ''
- name: test_infer_module_name_from_test_file_path_no_module_name
  short_name: _no_module_name
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: test_g.py
  result: ''
- name: test_infer_module_name_from_test_file_path_not_a_py_extension
  short_name: _not_a_py_extension
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: test_a_g.txt
  result: ''
- name: test_infer_module_name_from_test_file_path_not_end_with_g
  short_name: _not_end_with_g
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: test_a.py
  result: ''
- name: test_infer_module_name_from_test_file_path_not_start_with_test
  short_name: _not_start_with_test
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: a_g.py
  result: ''
- name: test_infer_module_name_from_test_file_path_valid
  short_name: _valid
  target:
    name: infer_module_name_from_test_file_path
  parameters:
  - name: file_name
    value: test_mod_a_g.py
  result: mod_a
- name: test_infer_scribe_file_path_invalid_file
  short_name: _invalid_file
  target:
    name: infer_scribe_file_path
  parameters:
  - name: file_path
    value: !testscribe/expression 'pathlib.Path("a.py")'
  exception:
    type: testscribe.error.Error
    message: a.py is not a valid scribe file or a generated unit test file.
- name: test_infer_scribe_file_path_test_file
  short_name: _test_file
  target:
    name: infer_scribe_file_path
  parameters:
  - name: file_path
    value: !testscribe/expression 'pathlib.Path("a/test_mod_g.py")'
  result: !testscribe/object
    type: pathlib.PosixPath
    repr: PosixPath('a/mod.tscribe')
- name: test_infer_scribe_file_path_scribe_file
  short_name: _scribe_file
  target:
    name: infer_scribe_file_path
  parameters:
  - name: file_path
    value: !testscribe/expression 'pathlib.Path("a/b.tscribe")'
  result: !testscribe/object
    type: pathlib.PosixPath
    repr: PosixPath('a/b.tscribe')
- name: test_infer_unit_test_file_path_from_scribe_file
  short_name: _
  target:
    name: infer_unit_test_file_path_from_scribe_file
  parameters:
  - name: scribe_file_path
    value: !testscribe/expression 'pathlib.Path("foo/bar/a.tscribe")'
  result: !testscribe/object
    type: pathlib.PosixPath
    repr: PosixPath('foo/bar/test_a_g.py')
- name: test_remove_file_if_no_test_has_test
  short_name: _has_test
  target:
    name: remove_file_if_no_test
  parameters:
  - name: file_path
    value: !testscribe/mock 'file_path'
  - name: tests
    value:
    - !testscribe/mock 'm_test_model'
  result: false
  mocks:
  - name: file_path
    spec: pathlib.Path
  - name: m_test_model
    spec: testscribe.model_type.TestModel
- name: test_remove_file_if_no_test_no_test_no_target_file
  short_name: _no_test_no_target_file
  target:
    name: remove_file_if_no_test
  parameters:
  - name: file_path
    value: !testscribe/mock 'file_path'
  - name: tests
    value: []
  result: true
  mocks:
  - name: file_path
    spec: pathlib.Path
    calls:
    - name: exists
      parameters: []
      return: false
- name: test_remove_file_if_no_test_no_test_existing_file_is_deleted
  short_name: _no_test_existing_file_is_deleted
  target:
    name: remove_file_if_no_test
  parameters:
  - name: file_path
    value: !testscribe/mock 'file_path'
  - name: tests
    value: []
  result: true
  mocks:
  - name: file_path
    spec: pathlib.Path
    calls:
    - name: exists
      parameters: []
      return: true
    - name: unlink
      parameters: []
      return: !testscribe/expression 'ignore'
    - name: __str__
      parameters: []
      return: m
