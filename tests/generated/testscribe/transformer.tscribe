format_version: 1
module: testscribe.transformer
tests:
- name: test_can_use_repr_unstable_repr
  short_name: _unstable_repr
  target:
    name: can_use_repr
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.FuncMember(test_data.simple.foo)'
  result: false
- name: test_can_use_repr_no_custom_repr
  short_name: _no_custom_repr
  target:
    name: can_use_repr
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.C(1)'
  result: false
- name: test_can_use_repr_has_normal_custom_repr
  short_name: _has_normal_custom_repr
  target:
    name: can_use_repr
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.SimpleDataClass(1)'
  result: true
- name: test_create_callable_model_function_type
  short_name: _function_type
  target:
    name: create_callable_model
  parameters:
  - name: v
    value: !testscribe/expression 'type(test_data.simple.foo)'
  result: !testscribe/object
    type: testscribe.model_type.CallableModel
    repr: types.FunctionType
- name: test_create_callable_model_method
  short_name: _method
  target:
    name: create_callable_model
  parameters:
  - name: v
    value: !testscribe/expression 'test_data.greet.Greeter.greet'
  result: !testscribe/object
    type: testscribe.model_type.CallableModel
    repr: test_data.greet.Greeter.greet
- name: test_create_callable_model_func
  short_name: _func
  target:
    name: create_callable_model
  parameters:
  - name: v
    value: !testscribe/expression 'test_data.simple.foo'
  result: !testscribe/object
    type: testscribe.model_type.CallableModel
    repr: test_data.simple.foo
- name: test_transform_class_use_repr
  short_name: _use_repr
  target:
    name: transform_class
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.CustomReprStr(1)'
  result: !testscribe/object
    type: testscribe.model_type.ObjectModel
    repr: test_data.simple.CustomReprStr(1)
- name: test_transform_class_members_are_trasnformed
  short_name: _members_are_trasnformed
  target:
    name: transform_class
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.WithClassMembers(test_data.simple.C(1))'
  result: !testscribe/object
    type: testscribe.model_type.ObjectModel
    repr: 'Object(type (test_data.simple.WithClassMembers), members ({''c'': Object(type
      (test_data.simple.C), members ({''a'': 1}))}))'
- name: test_transform_class_no_repr
  short_name: _no_repr
  target:
    name: transform_class
  parameters:
  - name: value
    value: !testscribe/expression 'test_data.simple.C(1)'
  result: !testscribe/object
    type: testscribe.model_type.ObjectModel
    repr: 'Object(type (test_data.simple.C), members ({''a'': 1}))'
- name: test_transform_value_complex_set_throw_exception
  short_name: _complex_set_throw_exception
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression '[1, {test_data.value.object_model_c, 2}]'
  exception:
    type: testscribe.error.UnsupportedDataError
    message: Sets that contain complex objects are not supported.
- name: test_transform_value_simple_1
  short_name: _simple
  target:
    name: transform_value
  parameters:
  - name: v
    value: !!python/tuple
    - 1
    - 2
  result: !!python/tuple
  - 1
  - 2
- name: test_transform_value_set
  short_name: _set
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/set
    - 1
    - 2
  result: !testscribe/object
    type: testscribe.model_type.SetModel
    repr: set([1, 2])
- name: test_transform_value_recursive_transform
  short_name: _recursive_transform
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression '[1, test_data.simple.foo]'
  result:
  - 1
  - !testscribe/object
    type: testscribe.model_type.CallableModel
    repr: test_data.simple.foo
- name: test_transform_value_simple
  short_name: _simple
  target:
    name: transform_value
  parameters:
  - name: v
    value:
    - 1
    - 2
  result:
  - 1
  - 2
- name: test_transform_value_callable
  short_name: _callable
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression 'test_data.simple.foo'
  result: !testscribe/object
    type: testscribe.model_type.CallableModel
    repr: test_data.simple.foo
- name: test_transform_value_callable_class_instance
  short_name: _callable_class_instance
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression 'test_data.simple.CallableClass(1)'
  result: !testscribe/object
    type: testscribe.model_type.ObjectModel
    repr: 'Object(type (test_data.simple.CallableClass), members ({''i'': 1}))'
- name: test_transform_value_input_value
  short_name: _input_value
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression 'testscribe.value_util.InputValue("a + 1", 2)'
  result: !testscribe/object
    type: testscribe.model_type.ExpressionModel
    repr: a + 1
- name: test_transform_value_class_instance
  short_name: _class_instance
  target:
    name: transform_value
  parameters:
  - name: v
    value: !testscribe/expression 'test_data.simple.C(1)'
  result: !testscribe/object
    type: testscribe.model_type.ObjectModel
    repr: 'Object(type (test_data.simple.C), members ({''a'': 1}))'
