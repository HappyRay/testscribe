format_version: 1
module: testscribe.gen_mock_verification_code
tests:
- name: test_generate_complex_param_verification
  short_name: _
  target:
    name: generate_complex_param_verification
  parameters:
  - name: params
    value: !testscribe/mock 'params'
  - name: mock_calls_name
    value: v
  result:
  - '    assert v[2].kwargs[''p''] == 1'
  - '    assert v[2].kwargs[''p2''] == 2'
  - '    assert v[2].args[3] is True'
  - '    assert v[2].args[5] == ''a'''
  mocks:
  - name: params
    spec: testscribe.gen_mock_verification_code.ComplexMockCallParam
    attributes:
      index: 2
      name_to_value:
        p: 1
        p2: 2
      index_to_value:
        3: true
        5: a
- name: test_generate_mock_call_list_no_call
  short_name: _no_call
  target:
    name: generate_mock_call_list
  parameters:
  - name: m
    value: !testscribe/mock 'm_1'
  result: !testscribe/object
    type: testscribe.gen_mock_verification_code.MockCallList
    repr: MockCallList(call_list_str='', complex_params=[])
  mocks:
  - name: m_1
    spec: testscribe.model_type.MockModel
    attributes:
      calls: []
- name: test_generate_mock_call_list_two_method_calls_one_with_complex_param
  short_name: _two_method_calls_one_with_complex_param
  target:
    name: generate_mock_call_list
  parameters:
  - name: m
    value: !testscribe/mock 'm_1'
  result: !testscribe/object
    type: testscribe.gen_mock_verification_code.MockCallList
    repr: 'MockCallList(call_list_str=''call.m1(p=1),\ncall.m2(p2=ANY),'', complex_params=[ComplexMockCallParam(index=1,
      name_to_value={''p2'': r}, index_to_value={})])'
  mocks:
  - name: m_1
    spec: testscribe.model_type.MockModel
    attributes:
      calls:
      - !testscribe/mock 'm_mock_call_model'
      - !testscribe/mock 'm_mock_call_model_1'
  - name: m_mock_call_model
    spec: testscribe.model_type.MockCallModel
    attributes:
      parameters: !testscribe/expression 'testscribe.namedvalues.NamedValues([("p",
        1)])'
      name: m1
  - name: m_mock_call_model_1
    spec: testscribe.model_type.MockCallModel
    attributes:
      parameters: !testscribe/expression 'testscribe.namedvalues.NamedValues([("p2",
        testscribe.model_type.ObjectModel("t", "r", {}))])'
      name: m2
- name: test_generate_mock_call_list_verfication
  short_name: _
  target:
    name: generate_mock_call_list_verfication
  parameters:
  - name: mock_name
    value: m
  - name: spec_str
    value: testscribe.simple.C
  - name: mock_calls_name
    value: v
  - name: call_list_str
    value: call list str
  result: |2-
        v = get_normalized_mock_calls(m, testscribe.simple.C)
        assert v == [
            call list str
        ]
- name: test_generate_mock_call_verification_no_call
  short_name: _no_call
  target:
    name: generate_mock_call_verification
  parameters:
  - name: m
    value: !testscribe/mock 'm_1'
  result: '    m.assert_not_called()'
  mocks:
  - name: m_1
    spec: testscribe.model_type.MockModel
    attributes:
      calls: []
      name: m
- name: test_generate_mock_call_verification
  short_name: _
  target:
    name: generate_mock_call_verification
  parameters:
  - name: m
    value: !testscribe/mock 'm_1'
  result: |2-
        m_mock_calls = get_normalized_mock_calls(m, spec_str)
        assert m_mock_calls == [
            call.c(p=ANY),
        ]
        assert isinstance(m_mock_calls[0].kwargs['p'], test_data.simple.C)
        assert m_mock_calls[0].kwargs['p'].a == 1
  mocks:
  - name: m_1
    spec: testscribe.model_type.MockModel
    attributes:
      calls:
      - !testscribe/mock 'm_mock_call_model'
      spec_str: spec_str
      name: m
  - name: m_mock_call_model
    spec: testscribe.model_type.MockCallModel
    attributes:
      parameters: !testscribe/expression 'testscribe.namedvalues.NamedValues([(''p'',
        test_data.value.object_model_c)])'
      name: c
- name: test_generate_mock_call_verification_statements
  short_name: generate_mock_call_verification_statements
  target:
    name: generate_mock_call_verification_str
  parameters:
  - name: mocks
    value:
    - !testscribe/mock 'm_mock_model'
    - !testscribe/mock 'm_mock_model_1'
  result: |2-

        m.assert_not_called()
        m1_mock_calls = get_normalized_mock_calls(m1, spec_str)
        assert m1_mock_calls == [
            call.c(),
        ]
  mocks:
  - name: m_mock_model
    spec: testscribe.model_type.MockModel
    attributes:
      calls: []
      name: m
  - name: m_mock_model_1
    spec: testscribe.model_type.MockModel
    attributes:
      calls:
      - !testscribe/mock 'm_mock_call_model'
      spec_str: spec_str
      name: m1
  - name: m_mock_call_model
    spec: testscribe.model_type.MockCallModel
    attributes:
      parameters: !testscribe/expression 'testscribe.namedvalues.NamedValues()'
      name: c
- name: test_generate_one_call_str_method
  short_name: _method
  target:
    name: generate_one_call_str
  parameters:
  - name: method_name
    value: m
  - name: param_str
    value: p
  result: call.m(p),
- name: test_generate_one_call_str_direct_call
  short_name: _direct_call
  target:
    name: generate_one_call_str
  parameters:
  - name: method_name
    value: ''
  - name: param_str
    value: p
  result: call(p),
- name: test_generate_one_mock_call_method_call_with_simple_named_param
  short_name: _method_call_with_simple_named_param
  target:
    name: generate_one_mock_call
  parameters:
  - name: index
    value: 1
  - name: call
    value: !testscribe/mock 'call'
  result: !!python/tuple
  - call.m(p=2),
  - null
  mocks:
  - name: call
    spec: testscribe.model_type.MockCallModel
    attributes:
      parameters: !testscribe/expression 'testscribe.namedvalues.NamedValues([("p",
        2)])'
      name: m
- name: test_get_mock_call_params
  short_name: _
  target:
    name: get_mock_call_params
  parameters:
  - name: param_list
    value: !testscribe/expression '[("", 1), ("p", test_data.value.object_model_d)]'
  result: !testscribe/object
    type: testscribe.gen_mock_verification_code.MockCallParams
    repr: 'MockCallParams(param_str=''1, p=ANY'', name_to_value={''p'': test_data.simple.ReadOnlyData(a=1)},
      index_to_value={})'
- name: test_get_mock_calls_variable_value_has_param_info
  short_name: _has_param_info
  target:
    name: get_mock_calls_variable_value
  parameters:
  - name: mock_name
    value: m
  - name: spec_str
    value: testscribe.simple.C
  result: get_normalized_mock_calls(m, testscribe.simple.C)
- name: test_get_mock_calls_variable_value_no_param_info
  short_name: _no_param_info
  target:
    name: get_mock_calls_variable_value
  parameters:
  - name: mock_name
    value: m
  - name: spec_str
    value: typing.Callable
  result: m.mock_calls
- name: test_get_one_complex_param_no_complex_param
  short_name: _no_complex_param
  target:
    name: get_one_complex_param
  parameters:
  - name: call_params
    value: !testscribe/mock 'call_params'
  - name: index
    value: 1
  result: null
  mocks:
  - name: call_params
    spec: testscribe.gen_mock_verification_code.MockCallParams
    attributes:
      name_to_value: {}
      index_to_value: {}
- name: test_get_one_complex_param_named_complex_param
  short_name: _named_complex_param
  target:
    name: get_one_complex_param
  parameters:
  - name: call_params
    value: !testscribe/mock 'call_params'
  - name: index
    value: 1
  result: !testscribe/object
    type: testscribe.gen_mock_verification_code.ComplexMockCallParam
    repr: 'ComplexMockCallParam(index=1, name_to_value={''p'': 1}, index_to_value={})'
  mocks:
  - name: call_params
    spec: testscribe.gen_mock_verification_code.MockCallParams
    attributes:
      name_to_value:
        p: 1
      index_to_value: {}
- name: test_get_one_complex_param_unnamed_complex_param
  short_name: _unnamed_complex_param
  description: For simplicity of this test the complex param value is represented
    by a simple value
  target:
    name: get_one_complex_param
  parameters:
  - name: call_params
    value: !testscribe/mock 'call_params'
  - name: index
    value: 1
  result: !testscribe/object
    type: testscribe.gen_mock_verification_code.ComplexMockCallParam
    repr: 'ComplexMockCallParam(index=1, name_to_value={}, index_to_value={2: True})'
  mocks:
  - name: call_params
    spec: testscribe.gen_mock_verification_code.MockCallParams
    attributes:
      name_to_value: {}
      index_to_value:
        2: true
- name: test_get_one_mock_call_arg_str_no_param_name
  short_name: _no_param_name
  target:
    name: get_one_mock_call_arg_str
  parameters:
  - name: value_str
    value: v
  - name: param_name
    value: ''
  result: v
- name: test_get_one_mock_call_arg_str_with_param_name
  short_name: _with_param_name
  target:
    name: get_one_mock_call_arg_str
  parameters:
  - name: value_str
    value: v
  - name: param_name
    value: p
  result: p=v
- name: test_get_one_mock_call_param_regular_value
  short_name: _regular_value
  target:
    name: get_one_mock_call_param
  parameters:
  - name: arg_list
    value: []
  - name: name_to_value
    value: {}
  - name: index_to_value
    value: {}
  - name: index
    value: 0
  - name: param_name
    value: p
  - name: v
    value: 1
  result: !!python/tuple
  - - p=1
  - {}
  - {}
- name: test_get_one_mock_call_param_complex_param
  short_name: _complex_param
  target:
    name: get_one_mock_call_param
  parameters:
  - name: arg_list
    value: []
  - name: name_to_value
    value: {}
  - name: index_to_value
    value: {}
  - name: index
    value: 0
  - name: param_name
    value: ''
  - name: v
    value: !testscribe/expression 'test_data.value.object_model_d'
  result: !!python/tuple
  - - ANY
  - {}
  - 0: !testscribe/object
      type: testscribe.model_type.ObjectModel
      repr: test_data.simple.ReadOnlyData(a=1)
- name: test_update_complex_mock_call_arg_map_with_param_name
  short_name: _with_param_name
  target:
    name: update_complex_mock_call_arg_map
  parameters:
  - name: name_to_value
    value: {}
  - name: index_to_value
    value: {}
  - name: index
    value: 0
  - name: param_name
    value: p
  - name: v
    value: 1
  result: !!python/tuple
  - p: 1
  - {}
- name: test_update_complex_mock_call_arg_map_no_param_name
  short_name: _no_param_name
  target:
    name: update_complex_mock_call_arg_map
  parameters:
  - name: name_to_value
    value: {}
  - name: index_to_value
    value: {}
  - name: index
    value: 0
  - name: param_name
    value: ''
  - name: v
    value: 1
  result: !!python/tuple
  - {}
  - 0: 1
