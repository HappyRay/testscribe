format_version: 1
module: wrapper.eval_expression_wrapper
tests:
- name: test_contain_mock_proxy_wrapper
  short_name: _
  target:
    name: contain_mock_proxy_wrapper
  parameters: []
  result: true
  patches:
  - target: test_scribe.global_var.g_mock_name_counter
    replacement: !test_scribe/expression 'collections.Counter(test_scribe.global_var.g_mock_name_counter)'
  - target: test_scribe.global_var.g_name_mock_dict
    replacement: {}
- name: test_process_complex_value_wrapper_mixed_m_function_complex_obj
  short_name: _
  target:
    name: process_complex_value_wrapper_mixed_m_function_complex_obj
  parameters: []
  result: !test_scribe/object
    type: test_data.simple.C
    members:
      a: 1
  patches:
  - target: test_scribe.global_var.g_mock_name_counter
    replacement: !test_scribe/expression 'collections.Counter(test_scribe.global_var.g_mock_name_counter)'
  - target: test_scribe.global_var.g_name_mock_dict
    replacement: {}
- name: test_process_mock_marker_wrapper_callable_with_parameter_types
  short_name: _callable_with_parameter_types
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.Callable[[int], int]'
  - name: v
    value: !test_scribe/expression 'test_scribe.api.mock_api.m'
  result: 1
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/object
          type: typing._GenericAlias
          members:
            _inst: true
            _special: false
            _name: Callable
            __origin__: !test_scribe/callable
              name: Callable
              module: collections.abc
            __args__: !!python/tuple
            - !test_scribe/callable
              name: int
              module: builtins
            - !test_scribe/callable
              name: int
              module: builtins
            __parameters__: !!python/tuple []
            __slots__: null
      return: 1
- name: test_process_mock_marker_wrapper_callable
  short_name: _callable
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.Callable'
  - name: v
    value: !test_scribe/expression 'test_scribe.api.mock_api.m'
  result: 1
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/object
          type: typing._VariadicGenericAlias
          members:
            _inst: true
            _special: true
            _name: Callable
            __origin__: !test_scribe/callable
              name: Callable
              module: collections.abc
            __args__: !!python/tuple []
            __parameters__: !!python/tuple []
            __slots__: null
            __doc__: "Callable type; Callable[[int], str] is a function of (int) ->\
              \ str.\n\n    The subscription syntax must always be used with exactly\
              \ two\n    values: the argument list and the return type.  The argument\
              \ list\n    must be a list of types or ellipsis; the return type must\
              \ be a single type.\n\n    There is no syntax to indicate optional or\
              \ keyword arguments,\n    such function types are rarely used as callback\
              \ types.\n    "
      return: 1
- name: test_process_mock_marker_wrapper_list_two_items
  short_name: _list_two_items
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.List[test_data.simple.C]'
  - name: v
    value: !test_scribe/expression '[test_scribe.api.mock_api.m, test_scribe.api.mock_api.m]'
  result:
  - 1
  - 2
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 1
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 2
- name: test_process_mock_marker_wrapper_tuple
  short_name: _tuple
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.Tuple[int, test_data.simple.C]'
  - name: v
    value: !test_scribe/expression '(1, test_scribe.api.mock_api.m)'
  result: !!python/tuple
  - 1
  - 2
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 2
- name: test_process_mock_marker_wrapper_tuple_with_ellipsis
  short_name: _tuple_with_ellipsis
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.Tuple[test_data.simple.C, ...]'
  - name: v
    value: !test_scribe/expression '(test_scribe.api.mock_api.m, test_scribe.api.mock_api.m)'
  result: !!python/tuple
  - 1
  - 2
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 1
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 2
- name: test_process_mock_marker_wrapper_dict
  short_name: _dict
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.Dict[str, test_data.simple.C]'
  - name: v
    value: !test_scribe/expression '{''a'': test_scribe.api.mock_api.m, ''b'': test_scribe.api.mock_api.m}'
  result:
    a: 1
    b: 2
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 1
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 2
- name: test_process_mock_marker_wrapper_optional_class
  short_name: _optional_class
  description: put the optional class type in a list to avoid the tool trying to create
    a mock before the function is executed.
  target:
    name: process_mock_marker_wrapper
  parameters:
  - name: t
    value: !test_scribe/expression 'typing.List[typing.Optional[test_data.simple.C]]'
  - name: v
    value: !test_scribe/expression '[test_scribe.api.mock_api.m]'
  result:
  - 1
  patches:
  - target: test_scribe.eval_expression.MockProxy
    replacement: !test_scribe/mock 'm_mock_proxy'
  mocks:
  - name: m_mock_proxy
    spec: test_scribe.mock_proxy.MockProxy
    calls:
    - parameters:
      - name: spec
        value: !test_scribe/callable
          name: C
          module: test_data.simple
      return: 1
- name: test_wrap_input_value_wrapper_complex_value
  short_name: _
  target:
    name: wrap_input_value_wrapper_complex_value
  parameters:
  - name: value
    value: !test_scribe/expression 'test_data.simple.C(1)'
  result: !test_scribe/object
    type: test_data.simple.C
    members:
      a: 1
